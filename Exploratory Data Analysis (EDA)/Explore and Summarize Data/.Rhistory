geom_point(color = '#00227b') +
coord_cartesian(xlim = c(1, 12)) +
scale_x_continuous(breaks = 1:12,
labels= c('Jan', 'Feb', 'Mar', 'May', 'Apr', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov',
'Dec')) +
ylab('Avg contribution ($)') +
xlab('Month') +
ggtitle('Average contributions amount by month for Donald Trump') +
geom_line(aes(y=)) +
geom_smooth()
# Creating a time-series distribution for Sanders
ts_plot_3 <- ggplot(aes(x = receipt_month, y = mean_donation),
data = sanders_distribution) +
geom_line(linetype = "3313", color = '#00227b') +
geom_hline(yintercept = grand_mean,
linetype = "dashed", alpha = .5) +
geom_point(color = '#00227b') +
coord_cartesian(xlim = c(1, 12)) +
scale_x_continuous(breaks = 1:12,
labels= c('Jan', 'Feb', 'Mar', 'May', 'Apr', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov',
'Dec')) +
ylab('Avg contribution ($)') +
xlab('Month') +
ggtitle('Average contributions amount by month for Bernard Sanders') +
geom_line(aes(y=)) +
geom_smooth()
# Plotting all the charts one over another to compare the distributions
grid.arrange(ts_plot_1, ts_plot_2, ts_plot_3, ncol = 1)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
library(readr)
library(dplyr)
library(ggmap)
library(ggplot2)
library(formattable)
library(circlize)
library(lubridate)
library(gridExtra)
# Load the Data
financial_contrib <- read_csv("P00000001-NY.csv")
columns_to_select <- c("comitee_id", "candidate_id", "candidate_name", "contributor_name",
"contributor_city", "contributor_state", "contributor_zip_code",                                            "contributor_employer", "contributor_occupation",                                                           "contributor_receipt_amount", "contributor_receipt_date",
"receipt_description", "memo_code", "memo_text", "form_type",                                               "file_number", "transaction_id", "election_type")
# Changing the name of the the columns to match the dataset documentation and be more readable to work
colnames(financial_contrib) <- columns_to_select
# Displaying the structure of the dataset
str(financial_contrib)
# Taking a look at the head of the dataset
head(financial_contrib)
# Converting string dates to date objects to be able to perform date operations
financial_contrib$contributor_receipt_date <- parse_date_time(x = financial_contrib$contributor_receipt_date,
orders = c("%d-%b-%y"))
# Extracting day from date
financial_contrib$receipt_day <- format(financial_contrib$contributor_receipt_date, "%d")
# Extracting month from date
financial_contrib$receipt_month <- format(financial_contrib$contributor_receipt_date, "%m")
# Extracting year from date
financial_contrib$receipt_year <- format(financial_contrib$contributor_receipt_date, "%Y")
# Converting contribution amount to double
financial_contrib$contributor_receipt_amount <- as.double(financial_contrib$contributor_receipt_amount)
# Converting file number to integer
financial_contrib$file_number <- as.numeric(financial_contrib$file_number)
# Converting occupation to factor
financial_contrib$contributor_occupation <- as.factor(financial_contrib$contributor_occupation)
# Converting city to factor
financial_contrib$contributor_city <- as.factor(financial_contrib$contributor_city)
# Converting election type to factor
financial_contrib$election_type <- as.factor(financial_contrib$election_type)
# Converting employer to factor
financial_contrib$contributor_employer <- as.factor(financial_contrib$contributor_employer)
# Converting zipcode to string
financial_contrib$contributor_zip_code <- as.character(financial_contrib$contributor_zip_code)
# Recover unique cities to geocode
unique_cities_df <- data.frame(city = unique(financial_contrib$contributor_city))
unique_cities_df$city <- as.character(unique_cities_df$city)
# Getting the name of unique locations
unique_cities_df <- na.omit(unique_cities_df)
# Calling geolocation service to obtain lat and lon
#geocode_output_df <- geocode(unique_cities_df$city,
#   output = 'latlona',
#   source = 'dsk',
#   messaging = FALSE,
#   sensor = FALSE)
# Changing the 'address' column name to match the original dataframe in order to join the data
#colnames(geocode_output_df)[which(names(geocode_output_df) == "address")] <- "contributor_city"
# Omiting NA values
#geocode_output_df <- na.omit(geocode_output_df)
# Joining original dataset with geolocation dataframe by 'contributor_city' key
#financial_contrib <- left_join(financial_contrib, geocode_output_df, by='contributor_city')
# Appending the newly created columns to the original ones
#new_columns <- append(columns_to_select, c('receipt_day', 'receipt_month', 'receipt_year',
#                                                     'lon', 'lat'))
# Selecting the columns of interest
#financial_contrib <- select(financial_contrib, new_columns)
# Saving the transformed dataset to avoid iterating over all this process again
#write.csv(financial_contrib, 'financial_contributions.csv')
# Loading the transformed dataset to explore on the next sessions
financial_contributions_df <- read.csv('financial_contributions.csv', as.is = TRUE)
# Setting seef for reproducibility
set.seed(1024)
# Making a sample to address performance issues
sample_financial_dataset <- financial_contributions_df[sample(length(financial_contributions_df$contributor_receipt_amount), 20000), ]
# Taking a look at the top records of the transformed dataset
head(sample_financial_dataset)
# Summary of the contribution amount
summary(sample_financial_dataset$contributor_receipt_amount)
# Number of contributions by year
table(sample_financial_dataset$receipt_year)
# The contributions count for each day of the month
table(sample_financial_dataset$receipt_day)
table(sample_financial_dataset$receipt_month)
# Finding the range of receipt amounts
range(sample_financial_dataset$contributor_receipt_amount)
# Creating histogram and limiting the x-axis to display only positive values
ggplot(aes(x = contributor_receipt_amount),
data = sample_financial_dataset) +
geom_histogram(binwidth = 500, fill = I('#357a38')) +
coord_cartesian(xlim = c(0, 6000))
# The most common amounts donated do presidentials
head(sort(table(sample_financial_dataset$contributor_receipt_amount), decreasing = TRUE), 10)
# Creating histogram and limiting the x-axis to display only positive values
ggplot(aes(x = log(contributor_receipt_amount)),
data = sample_financial_dataset, na.action = na.exclude) +
geom_histogram(fill = I('#357a38')) +
coord_cartesian(xlim = c(0, 8))
# Table the `candidate_name` column
table(sample_financial_dataset$candidate_name)
# Showing the percentage of contributions by candidate
ggplot(aes(candidate_name, (..count..)/sum(..count..)), data = sample_financial_dataset,
position = "dodge") +
geom_bar(fill = I('#009688')) +
theme(axis.text.x = element_text(angle=90))
# The number of unique occupation positions from contributors
length(unique(sample_financial_dataset$contributor_occupation))
# The top 10 occupation from contributors
top10_occupations <- head(sort(table(sample_financial_dataset$contributor_occupation), decreasing = TRUE), 10)
top10_occupations
# Filtering the dataframe to display only the data for the top 10 occupations
top_10_occ_df <- sample_financial_dataset[sample_financial_dataset$contributor_occupation %in% rownames(top10_occupations), ]
# Plotting the occupation bar plot
ggplot(aes(contributor_occupation, (..count..)/sum(..count..)),
data = top_10_occ_df) +
geom_bar(fill = I('#b26a00'),
position = 'dodge') +
theme(axis.text.x = element_text(angle=90))
# Grouping data by candidate and calculating mean and total contribution amount
stats_donation_by_candidate <- sample_financial_dataset %>% group_by(candidate_name) %>%
summarise(mean_donation = mean(contributor_receipt_amount),
total_donation = sum(contributor_receipt_amount))
# Sorting the grouped data by total amount
stats_donation_by_candidate <-arrange(stats_donation_by_candidate, desc(total_donation))
# Grouping data by location and calculating mean and total contribution amount
stats_donation_by_location <- sample_financial_dataset %>% group_by(contributor_city) %>%
summarise(mean_donation = mean(contributor_receipt_amount),
total_donation = sum(contributor_receipt_amount))
# Sorting the grouped data by total amount
stats_donation_by_location <- arrange(stats_donation_by_location, desc(total_donation))
# Grouping data by occupation and calculating mean and total contribution amount
stats_donation_by_occupation <- sample_financial_dataset %>% group_by(contributor_occupation) %>%
summarise(mean_donation = mean(contributor_receipt_amount),
total_donation = sum(contributor_receipt_amount))
# Sorting the grouped data by total amount
stats_donation_by_occupation <- arrange(stats_donation_by_occupation, desc(total_donation))
# Creating the first plot showing total contribution by occupation
plot1 <- ggplot(aes(x = contributor_occupation, y = (total_donation/sum(sample_financial_dataset$contributor_receipt_amount))),
data = head(stats_donation_by_occupation, 5)) +
geom_bar(stat = 'identity', fill = I('#00227b')) +
scale_y_continuous(labels = percent) +
ylab('Total Contributions (%)') +
xlab('Occupation') +
theme(axis.text.x = element_text(angle=90))
# Creating the second plot showing total contribution by location
plot2 <- ggplot(aes(x = contributor_city, y = (total_donation/sum(sample_financial_dataset$contributor_receipt_amount))),
data = head(stats_donation_by_location, 5)) +
geom_bar(stat = 'identity', fill = I('#00227b')) +
scale_y_continuous(labels = percent) +
ylab('Total Contributions (%)') +
xlab('Location') +
theme(axis.text.x = element_text(angle=90))
# Creating the third plot showing total contribution by location
plot3 <- ggplot(aes(x = candidate_name, y = (total_donation/sum(sample_financial_dataset$contributor_receipt_amount))),
data = head(stats_donation_by_candidate, 5)) +
geom_bar(stat = 'identity', fill = I('#00227b')) +
scale_y_continuous(labels = percent) +
ylab('Total Contributions (%)') +
xlab('Presidential') +
theme(axis.text.x = element_text(angle=90))
# Plot the 3 charts together, side by side, showing total amount contributed by candidate, location and occupation
grid.arrange(plot1, plot2, plot3, ncol=3)
# Grouping data by candidate and calculate the mean and total contribution by each one
grouped_by_candidate <- sample_financial_dataset %>% group_by(candidate_name) %>%
summarise(mean_donation = mean(contributor_receipt_amount),
total_donation = sum(contributor_receipt_amount))
# Variable to select rows containing 'Hillary'
rows_to_select_hillary = c('Clinton, Hillary Rodham')
# Variable to select rows containing 'Sanders'
rows_to_select_sanders = c('Sanders, Bernard')
# Variable to select rows containing 'Trump'
rows_to_select_trump = c('Trump, Donald J.')
# Filtering the grouped data by Hillary
hillary_distribution <- sample_financial_dataset[sample_financial_dataset$candidate_name %in% rows_to_select_hillary, ]
# Filtering the grouped data by Sanders
sanders_distribution <- sample_financial_dataset[sample_financial_dataset$candidate_name %in% rows_to_select_sanders, ]
# Filtering the grouped data by Trump
trump_distribution <- sample_financial_dataset[sample_financial_dataset$candidate_name %in% rows_to_select_trump, ]
# Finding the range of contribution amounts for Hillary
range(hillary_distribution$contributor_receipt_amount)
# Plotting boxplots for contributions for Hillary by month
ggplot(aes(x = receipt_month, y = contributor_receipt_amount, group = receipt_month),
data = hillary_distribution) +
geom_boxplot(outlier.size = 0) +
coord_cartesian(xlim = c(1, 12), ylim = c(0, 1000)) +
scale_y_continuous(breaks = seq(0, 1000, 200)) +
scale_x_continuous(breaks = 1:12,
labels= c('Jan', 'Feb', 'Mar', 'May', 'Apr', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')) +
ylab('Contributors amount distribution in dollars ($)') +
xlab('Month') +
ggtitle('Distribution of contributions by month for Hillary Clinton')
# Finding the range of contribution amounts for Sanders
range(sanders_distribution$contributor_receipt_amount)
# Plotting boxplots for contributions for Sanders by month
ggplot(aes(x = receipt_month, y = as.numeric(contributor_receipt_amount), group = receipt_month),
data = sanders_distribution) +
geom_boxplot(outlier.size = 0) +
coord_cartesian(xlim = c(1, 12), ylim = c(0, 1000)) +
scale_y_continuous(breaks = seq(0, 1000, 200)) +
scale_x_discrete(breaks = 1:12,
labels= c('Jan', 'Feb', 'Mar', 'May', 'Apr', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')) +
ylab('Contributors amount distribution in dollars ($)') +
xlab('Month') +
ggtitle('Distribution of contributions by month for Bernard Sanders')
# Finding the range of contribution amounts for Trump
range(trump_distribution$contributor_receipt_amount)
# Plotting boxplots for contributions for Trump by month
ggplot(aes(x = receipt_month, y = contributor_receipt_amount, group = receipt_month),
data = trump_distribution) +
geom_boxplot(outlier.size = 0) +
coord_cartesian(xlim = c(1, 12), ylim = c(0, 2800)) +
scale_y_continuous(breaks = seq(0, 2800, 200)) +
scale_x_continuous(breaks = 1:12,
labels= c('Jan', 'Feb', 'Mar', 'May', 'Apr', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')) +
ylab('Contributors amount distribution in dollars ($)') +
xlab('Month') +
ggtitle('Distribution of contributions by month for Donald Trump')
# Boxplot for Hillary Clinton's donations
p1 <- ggplot(aes(x = candidate_name, y = contributor_receipt_amount),
data = hillary_distribution) +
geom_boxplot(outlier.size = 0) +
coord_cartesian(ylim = c(0, 1000)) +
scale_y_continuous(breaks = seq(0, 1000, 100))
# Boxplot for Bernard Sanders' donations
p2 <- ggplot(aes(x = candidate_name, y = contributor_receipt_amount),
data = sanders_distribution) +
geom_boxplot(outlier.size = 0) +
coord_cartesian(ylim = c(0, 1000)) +
scale_y_continuous(breaks = seq(0, 1000, 100))
# Boxplot for Donald Trump donations
p3 <- ggplot(aes(x = candidate_name, y = contributor_receipt_amount),
data = trump_distribution) +
geom_boxplot(outlier.size = 0) +
coord_cartesian(ylim = c(0, 1000)) +
scale_y_continuous(breaks = seq(0, 1000, 100))
grid.arrange(p1, p2, p3, ncol = 3)
# Aggregating contributions amount by month, and creating the stats features 'mean_donation', 'total_donation' and 'n' (as the number of donations)
timeseries_contrib <- sample_financial_dataset %>% group_by(receipt_month) %>%
summarise(mean_donation = mean(contributor_receipt_amount),
total_donation = sum(contributor_receipt_amount),
n = n())
head(timeseries_contrib)
# Calculate the grand mean for amount
grand_mean <- mean(sample_financial_dataset$contributor_receipt_amount)
# Calculate the max mean_donation amount
grand_max <- max(timeseries_contrib$mean_donation)
# Calculate the min mean_donation amount
grand_min <- min(timeseries_contrib$mean_donation)
# Plotting line chart with timeseries data grouping the data by average per month
ggplot(aes(x = receipt_month, y = mean_donation),
data = timeseries_contrib) +
geom_line(linetype = "3313", color = '#00227b') +
geom_hline(yintercept = grand_mean,
linetype = "dashed", alpha = .5) +
geom_point(color = '#00227b') +
coord_cartesian(xlim = c(1, 12)) +
scale_x_continuous(breaks = 1:12,
labels= c('Jan', 'Feb', 'Mar', 'May', 'Apr', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov',
'Dec')) +
annotate("rect", xmin = -Inf, xmax = Inf,
ymin = grand_mean, ymax = grand_max,
fill='#0069c0',
alpha = .1,
color = NA) +
annotate("rect", xmin = -Inf, xmax = Inf,
ymin = grand_min, ymax = grand_mean,
fill='#9a0007',
alpha = .1, color = NA) +
ylab('Average contribution in dollars ($)') +
xlab('Month') +
ggtitle('Average contributions amount over time (by month)') +
geom_line(aes(y=))
# In this sectin, I was going to use Facebook's prophet library to forecast the distribution data, but inconsistencies in my invironment (Linux) made it a bit difficult. For this reason, I let this for a future moment. Anyways, I already prepared the data to feed into the prophet dataframe structure.
# Filtering the first 6 months of 2016
first_semester_2016 <- sample_financial_dataset[sample_financial_dataset$receipt_year == 2016 &
sample_financial_dataset$receipt_month <= 6, ]
# Preparing the data for Prophet
first_semester_2016 <- select(first_semester_2016, c('contributor_receipt_amount',
'contributor_receipt_date'))
# Converting the `contributor_receipt_date` column from string to date object
first_semester_2016$contributor_receipt_date <- as.Date(first_semester_2016$contributor_receipt_date)
# Showing the top results
# head(first_semester_2016)
# Not independent (can reject the null hypothesis)
fligner.test(log10(contributor_receipt_amount) ~ as.factor(contributor_occupation),
data = sample_financial_dataset, na.action = na.exclude)
# Not independent (can reject the null hypothesis)
fligner.test(log10(contributor_receipt_amount) ~ as.factor(contributor_city),
data = sample_financial_dataset, na.action = na.exclude)
# Adding one more dimension to the analysis
# Grouping the data by occupation
group_by_occupation <- sample_financial_dataset %>% group_by(contributor_occupation) %>%
summarise(mean_donation = mean(contributor_receipt_amount),
total_donation = sum(contributor_receipt_amount))
# Sorting the occupations by those with the highest contribution amounts
group_by_occupation <- arrange(group_by_occupation, desc(total_donation))
# Selecting top occupation names to filter the original dataframe
top_occupations <- head(group_by_occupation, 5)$contributor_occupation
# Grouping data by occupation and candidate and then calculating the mean and total donation amounts
stats_donation_by_loc_and_candidate <- sample_financial_dataset %>% group_by(contributor_occupation, candidate_name) %>%
summarise(mean_donation = mean(contributor_receipt_amount),
total_donation = sum(contributor_receipt_amount))
# Sorting the data by total donation
stats_donation_by_loc_and_candidate <- arrange(stats_donation_by_loc_and_candidate, desc(total_donation))
# Filtering the rows by the top 3 candidates
stats_donation_by_loc_and_candidate <- stats_donation_by_loc_and_candidate[stats_donation_by_loc_and_candidate$candidate_name %in% c(rows_to_select_hillary, rows_to_select_trump, rows_to_select_sanders), ]
# Filtering the occupation by the top 5 occupations
stats_donation_by_loc_and_candidate <- stats_donation_by_loc_and_candidate[stats_donation_by_loc_and_candidate$contributor_occupation %in% top_occupations, ]
# Plotting top occupations by the top 3 candidates, faceting the candidate name
ggplot(aes(x = contributor_occupation, y = total_donation/sum(sample_financial_dataset$contributor_receipt_amount)),
data = stats_donation_by_loc_and_candidate) +
geom_bar(stat = 'identity', fill = I('#00227b')) +
facet_wrap(~ stats_donation_by_loc_and_candidate$candidate_name) +
scale_y_continuous(labels = percent) +
ylab('Total Contributions (%)') +
xlab('Occupation') +
theme(axis.text.x = element_text(angle=90))
# Grouping the data by only the year of 2016 and amounts greater than 0, then grouping the data by month and candidate, calculating mean donation, total donation and the number of donations
timeseries_contrib_multi <- sample_financial_dataset[sample_financial_dataset$receipt_year == 2016 &
sample_financial_dataset$contributor_receipt_amount > 0, ] %>% group_by(receipt_month, candidate_name) %>%
summarise(mean_donation = mean(contributor_receipt_amount),
total_donation = sum(contributor_receipt_amount),
n = n())
# Filtering the data by Hillary
hillary_distribution <- timeseries_contrib_multi[timeseries_contrib_multi$candidate_name %in% rows_to_select_hillary, ]
# Filtering the data by Trump
trump_distribution <- timeseries_contrib_multi[timeseries_contrib_multi$candidate_name %in% rows_to_select_trump, ]
# Filtering the data by Sanders
sanders_distribution <- timeseries_contrib_multi[timeseries_contrib_multi$candidate_name %in% rows_to_select_sanders, ]
# Creating a time-series distribution for Hillary
ts_plot_1 <- ggplot(aes(x = receipt_month, y = mean_donation),
data = hillary_distribution) +
geom_line(linetype = "3313", color = '#00227b') +
geom_hline(yintercept = grand_mean,
linetype = "dashed", alpha = .5) +
geom_point(color = '#00227b') +
coord_cartesian(xlim = c(1, 12)) +
scale_x_continuous(breaks = 1:12) +
ylab('Avg contribution ($)') +
xlab('Month') +
ggtitle('Average contributions amount by month for Hillary Clinton') +
geom_line(aes(y=)) +
geom_smooth()
# Creating a time-series distribution for Trump
ts_plot_2 <- ggplot(aes(x = receipt_month, y = mean_donation),
data = trump_distribution) +
geom_line(linetype = "3313", color = '#00227b') +
geom_hline(yintercept = grand_mean,
linetype = "dashed", alpha = .5) +
geom_point(color = '#00227b') +
coord_cartesian(xlim = c(1, 12)) +
scale_x_continuous(breaks = 1:12) +
ylab('Avg contribution ($)') +
xlab('Month') +
ggtitle('Average contributions amount by month for Donald Trump') +
geom_line(aes(y=)) +
geom_smooth()
# Creating a time-series distribution for Sanders
ts_plot_3 <- ggplot(aes(x = receipt_month, y = mean_donation),
data = sanders_distribution) +
geom_line(linetype = "3313", color = '#00227b') +
geom_hline(yintercept = grand_mean,
linetype = "dashed", alpha = .5) +
geom_point(color = '#00227b') +
coord_cartesian(xlim = c(1, 12)) +
scale_x_continuous(breaks = 1:12) +
ylab('Avg contribution ($)') +
xlab('Month') +
ggtitle('Average contributions amount by month for Bernard Sanders') +
geom_line(aes(y=)) +
geom_smooth()
# Plotting all the charts one over another to compare the distributions
grid.arrange(ts_plot_1, ts_plot_2, ts_plot_3, ncol = 1)
# NYC base longitude
nyc_lon <- -73.9765565
# NYC base latitute
nyc_lat <- 40.7139379
# Grouping data by candidate, lat, and lon; then calculation the total donation and the number of occurrencies
group_candidate_map <- sample_financial_dataset %>%
group_by(candidate_name, lat, lon) %>%
summarise(donation = sum(contributor_receipt_amount),
n = n())
# Filtering the data by the top 3 candidates
group_candidate_map <- group_candidate_map[group_candidate_map$candidate_name %in% c(rows_to_select_hillary, rows_to_select_trump, rows_to_select_sanders), ]
# Transforming candidate name into a factor variable
group_candidate_map$candidate_name <- as.factor(group_candidate_map$candidate_name)
# Getting the map to the geolocation passed as parameter and zooming it to 10
nyc_map <- get_map(location = c(nyc_lon, nyc_lat), zoom = 10)
# Plotting the map and the bubbles for each candidade overlaying it;  the size of the bubble indicates a higher contribution amount
ggmap(nyc_map) + geom_point(data=group_candidate_map,
aes(x = lon, y = lat,
colour = group_candidate_map$candidate_name),
size= 3*log10(group_candidate_map$donation), alpha = .3) +
scale_color_brewer(type = 'div', palette = 'Dark2',
guide = guide_legend(title = 'Candidate name'))
# Showing the percentage of contributions by candidate
ggplot(aes(candidate_name, (..count..)/sum(..count..)), data = sample_financial_dataset,
position = "dodge") +
geom_bar(fill = I('#009688')) +
theme(axis.text.x = element_text(angle=90)) +
scale_y_continuous(labels = percent) +
ylab('Total contributions (%)') +
xlab('Candidate') +
ggtitle('Total contribution amount for all candidates')
# Filtering the dataframe to display only the data for the top 10 occupations
top_10_occ_df <- sample_financial_dataset[sample_financial_dataset$contributor_occupation %in% rownames(top10_occupations), ]
# Plotting the occupation bar plot
ggplot(aes(contributor_occupation, (..count..)/sum(..count..)),
data = top_10_occ_df) +
geom_bar(fill = I('#b26a00'),
position = 'dodge') +
theme(axis.text.x = element_text(angle=90)) +
scale_y_continuous(labels = percent) +
ylab('Total contributions (%)') +
xlab('Occupation') +
ggtitle('Total contribution amount for all occupations')
# Grouping the data by only the year of 2016 and amounts greater than 0, then grouping the data by month and candidate, calculating mean donation, total donation and the number of donations
timeseries_contrib_multi <- sample_financial_dataset[sample_financial_dataset$receipt_year == 2016 &
sample_financial_dataset$contributor_receipt_amount > 0, ] %>% group_by(receipt_month, candidate_name) %>%
summarise(mean_donation = mean(contributor_receipt_amount),
total_donation = sum(contributor_receipt_amount),
n = n())
# Filtering the data by Hillary
hillary_distribution <- timeseries_contrib_multi[timeseries_contrib_multi$candidate_name %in% rows_to_select_hillary, ]
# Filtering the data by Trump
trump_distribution <- timeseries_contrib_multi[timeseries_contrib_multi$candidate_name %in% rows_to_select_trump, ]
# Filtering the data by Sanders
sanders_distribution <- timeseries_contrib_multi[timeseries_contrib_multi$candidate_name %in% rows_to_select_sanders, ]
# Creating a time-series distribution for Hillary
ts_plot_1 <- ggplot(aes(x = receipt_month, y = mean_donation),
data = hillary_distribution) +
geom_line(linetype = "3313", color = '#00227b') +
geom_hline(yintercept = grand_mean,
linetype = "dashed", alpha = .5) +
geom_point(color = '#00227b') +
coord_cartesian(xlim = c(1, 12)) +
scale_x_continuous(breaks = 1:12,
labels= c('Jan', 'Feb', 'Mar', 'May', 'Apr', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov',
'Dec')) +
ylab('Avg contribution ($)') +
xlab('Month') +
ggtitle('Average contributions amount by month for Hillary Clinton') +
geom_line(aes(y=)) +
geom_smooth()
# Creating a time-series distribution for Trump
ts_plot_2 <- ggplot(aes(x = receipt_month, y = mean_donation),
data = trump_distribution) +
geom_line(linetype = "3313", color = '#00227b') +
geom_hline(yintercept = grand_mean,
linetype = "dashed", alpha = .5) +
geom_point(color = '#00227b') +
coord_cartesian(xlim = c(1, 12)) +
scale_x_continuous(breaks = 1:12,
labels= c('Jan', 'Feb', 'Mar', 'May', 'Apr', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov',
'Dec')) +
ylab('Avg contribution ($)') +
xlab('Month') +
ggtitle('Average contributions amount by month for Donald Trump') +
geom_line(aes(y=)) +
geom_smooth()
# Creating a time-series distribution for Sanders
ts_plot_3 <- ggplot(aes(x = receipt_month, y = mean_donation),
data = sanders_distribution) +
geom_line(linetype = "3313", color = '#00227b') +
geom_hline(yintercept = grand_mean,
linetype = "dashed", alpha = .5) +
geom_point(color = '#00227b') +
coord_cartesian(xlim = c(1, 12)) +
scale_x_continuous(breaks = 1:12,
labels= c('Jan', 'Feb', 'Mar', 'May', 'Apr', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov',
'Dec')) +
ylab('Avg contribution ($)') +
xlab('Month') +
ggtitle('Average contributions amount by month for Bernard Sanders') +
geom_line(aes(y=)) +
geom_smooth()
# Plotting all the charts one over another to compare the distributions
grid.arrange(ts_plot_1, ts_plot_2, ts_plot_3, ncol = 1)
